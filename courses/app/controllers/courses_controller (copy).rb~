class LessonController < ApplicationController
  before_action :set_course, only: [:show, :edit, :update, :destroy]

  # GET /lessons
  # GET /lessons.json
  def index
    @lesson = Lesson.all
  end

  # GET /lessons/1
  # GET /lessons/1.json
  def show
  end

  # GET /lessons/new
  def new
    @lesson = Lesson.new
  end

  # GET /lessons/1/edit
  def edit
  end

  # POST /lessons
  # POST /lessons.json
  def create
    @lesson = Lesson.new(course_params)

    

    respond_to do |format|
     

     
    
      if @lesson.save
         
       format.html { render :show, notice: 'Done' }
        format.json { render :show, status: :created, location: @course }

      else
        format.html { render :new }
        format.json { render json: @course.errors, status: :unprocessable_entity }
      end
    
end
  end

  def coursebasics

  end

 def curriculum

  end

  # PATCH/PUT /courses/1
  # PATCH/PUT /courses/1.json
  def update
    respond_to do |format|
      if @lesson.update(course_params)
        format.html { redirect_to @lesson, notice: 'Course was successfully updated.' }
        format.json { render :show, status: :ok, location: @lesson }
      else
        format.html { render :edit }
        format.json { render json: @lesson.errors, status: :unprocessable_entity }
      end
    end
  end

  # DELETE /courses/1
  # DELETE /courses/1.json
  def destroy
    @lesson.destroy
    respond_to do |format|
      format.html { redirect_to courses_url, notice: 'Course was successfully destroyed.' }
      format.json { head :no_content }
    end
  end

  private
    # Use callbacks to share common setup or constraints between actions.
    def set_course
      @course = Course.find(params[:id])
    end

    # Never trust parameters from the scary internet, only allow the white list through.
    def course_params
      params.require(:course).permit(:instructor_id, :title, :subtitle, :objectives, :language_id, :category_id, :subcategory_id, :level_id, :certificate, :lectures, :coursecontentjson, :privacy_level)
    end
end
